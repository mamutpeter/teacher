import os
import httpx
import asyncpg
from gtts import gTTS
from dotenv import load_dotenv
from telegram import Update, KeyboardButton, ReplyKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, ContextTypes, filters

load_dotenv()
BOT_TOKEN = os.getenv("BOT_TOKEN")
DATABASE_URL = os.getenv("DATABASE_URL")

# Travel-—Ñ—Ä–∞–∑–∏ (–ø—Ä–∏–∫–ª–∞–¥, –¥–æ–ø–æ–≤–Ω—é–π —Ç–µ–º–∞–º–∏ –π —Ç–µ–∫—Å—Ç–∞–º–∏)
TRAVEL_PHRASES = {
    "hotel": [
        {
            "en": "I'd like to check in, please.",
            "ua": "–Ø —Ö–æ—á—É –∑–∞—Å–µ–ª–∏—Ç–∏—Å—è, –±—É–¥—å –ª–∞—Å–∫–∞.",
            "tip": "–§—Ä–∞–∑–∞ –¥–ª—è —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó –≤ –≥–æ—Ç–µ–ª—ñ."
        },
        {
            "en": "Do you have a reservation?",
            "ua": "–£ –≤–∞—Å —î –±—Ä–æ–Ω—é–≤–∞–Ω–Ω—è?",
            "tip": "–ö–æ–ª–∏ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä –ø–∏—Ç–∞—î –ø—Ä–æ –±—Ä–æ–Ω—å."
        },
        {
            "en": "Can I have the Wi-Fi password?",
            "ua": "–ú–æ–∂–Ω–∞ –ø–∞—Ä–æ–ª—å –≤—ñ–¥ Wi-Fi?",
            "tip": "–ü—Ä–æ —ñ–Ω—Ç–µ—Ä–Ω–µ—Ç —É –≥–æ—Ç–µ–ª—ñ."
        }
    ],
    "taxi": [
        {
            "en": "How much does it cost to go to the airport?",
            "ua": "–°–∫—ñ–ª—å–∫–∏ –∫–æ—à—Ç—É—î –¥–æ—ó—Ö–∞—Ç–∏ –¥–æ –∞–µ—Ä–æ–ø–æ—Ä—Ç—É?",
            "tip": "–£—Ç–æ—á–Ω—é—î–º–æ —Ü—ñ–Ω—É —É —Ç–∞–∫—Å–∏—Å—Ç–∞."
        },
        {
            "en": "Please take me to this address.",
            "ua": "–í—ñ–¥–≤–µ–∑—ñ—Ç—å –º–µ–Ω–µ –∑–∞ —Ü—ñ—î—é –∞–¥—Ä–µ—Å–æ—é, –±—É–¥—å –ª–∞—Å–∫–∞.",
            "tip": "–ü–æ–∫–∞–∑—É—î–º–æ –∞–¥—Ä–µ—Å—É –≤–æ–¥—ñ—é."
        }
    ]
    # –î–æ–¥–∞–≤–∞–π —â–µ —Ç–µ–º–∏!
}

TOPICS_LIST = list(TRAVEL_PHRASES.keys())

def get_voice_filename(user_id):
    return f"voice_{user_id}.mp3"

async def send_travel_phrase(update: Update, en, ua, tip):
    await update.message.reply_text(f"üá¨üáß {en}\nüá∫üá¶ {ua}\nüí° {tip}")
    filename = get_voice_filename(update.effective_user.id)
    tts = gTTS(en, lang='en')
    tts.save(filename)
    with open(filename, 'rb') as voice:
        await update.message.reply_voice(voice)
    os.remove(filename)

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        [KeyboardButton("–ù–∞–≤—á–∞–Ω–Ω—è"), KeyboardButton("–î–æ–≤—ñ–¥–Ω–∏–∫")]
    ]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    await update.message.reply_text(
        "–ü—Ä–∏–≤—ñ—Ç! –Ø —Ç–≤—ñ–π travel-–±–æ—Ç –∞–Ω–≥–ª—ñ–π—Å—å–∫–æ—ó –¥–ª—è –ø–æ–¥–æ—Ä–æ–∂–µ–π üåç\n\n"
        "üëâ –•–æ—á–µ—à —à–≤–∏–¥–∫–æ –Ω–∞–≤—á–∏—Ç–∏—Å—å ‚Äî –æ–±–µ—Ä–∏ '–ù–∞–≤—á–∞–Ω–Ω—è'.\n"
        "üëâ –•–æ—á–µ—à –ø—Ä–æ—Å—Ç–æ –∑–Ω–∞–π—Ç–∏ –ø–æ—Ç—Ä—ñ–±–Ω—É —Ñ—Ä–∞–∑—É ‚Äî –æ–±–µ—Ä–∏ '–î–æ–≤—ñ–¥–Ω–∏–∫'.",
        reply_markup=reply_markup
    )
    context.user_data["mode"] = None

async def handle_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text.lower()
    if text in ["–Ω–∞–≤—á–∞–Ω–Ω—è", "/learn"]:
        context.user_data["mode"] = "learn"
        context.user_data["learn_topic"] = 0
        context.user_data["learn_phrase"] = 0
        await show_next_phrase(update, context)
    elif text in ["–¥–æ–≤—ñ–¥–Ω–∏–∫", "/browse"]:
        context.user_data["mode"] = "browse"
        await show_topics(update)
    elif text in TOPICS_LIST:
        await show_topic_phrases(update, text)
    elif context.user_data.get("mode") == "learn":
        await show_next_phrase(update, context)
    else:
        # –ü–æ—à—É–∫ –ø–æ –∫–ª—é—á–æ–≤–æ–º—É —Å–ª–æ–≤—É
        await find_phrase(update, text)

async def show_topics(update: Update):
    topics = [f"‚Ä¢ {k.title()}" for k in TOPICS_LIST]
    await update.message.reply_text(
        "–û–±–µ—Ä—ñ—Ç—å —Ç–µ–º—É –∞–±–æ –Ω–∞–ø–∏—à—ñ—Ç—å —ó—ó –Ω–∞–∑–≤—É –∞–Ω–≥–ª—ñ–π—Å—å–∫–æ—é —á–∏ —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—é:\n" + "\n".join(topics)
    )

async def show_topic_phrases(update: Update, topic):
    phrases = TRAVEL_PHRASES.get(topic, [])
    if not phrases:
        await update.message.reply_text("–£ —Ü—ñ–π —Ç–µ–º—ñ –ø–æ–∫–∏ —â–æ –Ω–µ–º–∞—î —Ñ—Ä–∞–∑.")
        return
    for p in phrases:
        await send_travel_phrase(update, p["en"], p["ua"], p["tip"])

async def show_next_phrase(update: Update, context: ContextTypes.DEFAULT_TYPE):
    topic_idx = context.user_data.get("learn_topic", 0)
    phrase_idx = context.user_data.get("learn_phrase", 0)
    if topic_idx >= len(TOPICS_LIST):
        await update.message.reply_text("–í–∏ –ø—Ä–æ–π—à–ª–∏ –≤—Å—ñ —Ç–µ–º–∏! –ü–∏—à–∞—î–º–æ—Å—è –≤–∞–º–∏ üëè")
        return
    topic = TOPICS_LIST[topic_idx]
    phrases = TRAVEL_PHRASES[topic]
    if phrase_idx >= len(phrases):
        context.user_data["learn_topic"] = topic_idx + 1
        context.user_data["learn_phrase"] = 0
        await show_next_phrase(update, context)
        return
    p = phrases[phrase_idx]
    await send_travel_phrase(update, p["en"], p["ua"], p["tip"])
    context.user_data["learn_phrase"] = phrase_idx + 1

async def find_phrase(update: Update, query):
    query = query.lower()
    results = []
    for topic, phrases in TRAVEL_PHRASES.items():
        for p in phrases:
            if query in p["en"].lower() or query in p["ua"].lower():
                results.append(p)
    if not results:
        await update.message.reply_text("–§—Ä–∞–∑—É –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ. –°–ø—Ä–æ–±—É–π—Ç–µ —ñ–Ω—à–µ —Å–ª–æ–≤–æ.")
    else:
        for p in results:
            await send_travel_phrase(update, p["en"], p["ua"], p["tip"])

def main():
    app = Application.builder().token(BOT_TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_text))
    app.run_polling()

if __name__ == "__main__":
    main()
