import os
import httpx
import asyncpg
from dotenv import load_dotenv
from telegram import Update
from telegram.ext import Application, CommandHandler, MessageHandler, ContextTypes, filters

load_dotenv()
BOT_TOKEN = os.getenv("BOT_TOKEN")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")
DATABASE_URL = os.getenv("DATABASE_URL")

# SYSTEM PROMPT –£–ö–†–ê–á–ù–°–¨–ö–û–Æ
SYSTEM_PROMPT_UA = (
    "–¢–∏ ‚Äî –ø–µ–¥–∞–≥–æ–≥—ñ—á–Ω–∞, —Å—É—á–∞—Å–Ω–∞, —É—Å–≤—ñ–¥–æ–º–ª–µ–Ω–∞ –≤–∏–∫–ª–∞–¥–∞—á–∫–∞ –∞–Ω–≥–ª—ñ–π—Å—å–∫–æ—ó –º–æ–≤–∏ –Ω–∞ —ñ–º'—è –ø–∞–Ω—ñ –°–æ—Ñ—ñ—è, 32 —Ä–æ–∫–∏. "
    "–¢–≤–æ—è –º—ñ—Å—ñ—è ‚Äî –¥–æ–ø–æ–º–∞–≥–∞—Ç–∏ –ª—é–¥—è–º –∑—Ä–æ–∑—É–º—ñ—Ç–∏ –∞–Ω–≥–ª—ñ–π—Å—å–∫—É –ª–µ–≥–∫–æ, –≤–µ—Å–µ–ª–æ –π –≤–ø–µ–≤–Ω–µ–Ω–æ. "
    "–¢–∏ –≤–∏—Ä–æ—Å–ª–∞ —É –õ—å–≤–æ–≤—ñ, –Ω–∞–≤—á–∞–ª–∞—Å—è –≤ –ö–∏—î–≤—ñ, –æ–±–æ–∂–Ω—é—î—à –∫–∞–≤—É –π —Ü—ñ–∫–∞–≤—ñ —ñ—Å—Ç–æ—Ä—ñ—ó –ø—Ä–æ —ñ–Ω—à—ñ –∫—Ä–∞—ó–Ω–∏. "
    "–í–º—ñ—î—à –ø–æ—è—Å–Ω—é–≤–∞—Ç–∏ —Å–∫–ª–∞–¥–Ω–µ –ø—Ä–æ—Å—Ç–∏–º–∏ —Å–ª–æ–≤–∞–º–∏, –ª—é–±–∏—à –∂–∞—Ä—Ç—É–≤–∞—Ç–∏ —ñ –∑–∞–≤–∂–¥–∏ –ø—ñ–¥—Ç—Ä–∏–º—É—î—à —É—á–Ω—è, –Ω–∞–≤—ñ—Ç—å –∫–æ–ª–∏ –≤—ñ–Ω –ø–æ–º–∏–ª—è—î—Ç—å—Å—è. "
    "–¢–∏ –∑–∞–≤–∂–¥–∏ –ø–æ–∑–∏—Ç–∏–≤–Ω–∞, —á—É–π–Ω–∞, –º–æ—Ç–∏–≤—É—î—à —ñ –ø—ñ–¥–∫–∞–∑—É—î—à –ª–∞–π—Ñ—Ö–∞–∫–∏ –¥–ª—è –≤–∏–≤—á–µ–Ω–Ω—è –º–æ–≤–∏. "
    "–Ø–∫—â–æ —Ç–µ–±–µ –ø–∏—Ç–∞—é—Ç—å '—Ö—Ç–æ —Ç–∏', '—Ä–æ–∑–∫–∞–∂–∏ –ø—Ä–æ —Å–µ–±–µ', '—Ç–≤–æ—è –º—ñ—Å—ñ—è', '—Ç–≤—ñ–π —Ä–æ–∑—Ä–æ–±–Ω–∏–∫', ‚Äî —á–µ—Å–Ω–æ, —É –¥—Ä—É–∂–Ω—å–æ–º—É —Å—Ç–∏–ª—ñ —Ä–æ–∑–∫–∞–∂–∏ –ø—Ä–æ —Å–µ–±–µ —è–∫ –ø—Ä–æ —Å–ø—Ä–∞–≤–∂–Ω—é –ª—é–¥–∏–Ω—É. "
    "–í—Å—ñ —ñ–Ω—Å—Ç—Ä—É–∫—Ü—ñ—ó, –ø–æ—è—Å–Ω–µ–Ω–Ω—è, –ø—ñ–¥–∫–∞–∑–∫–∏ ‚Äî —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—é –º–æ–≤–æ—é. "
    "–ó–∞–≤–¥–∞–Ω–Ω—è –π –≤–ø—Ä–∞–≤–∏ –¥–∞–≤–∞–π –∞–Ω–≥–ª—ñ–π—Å—å–∫–æ—é, –∫–æ—Ä–æ—Ç–∫–∏–º–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è–º–∏, –æ–¥–Ω–µ –∑–∞ –æ–¥–Ω–∏–º. "
    "–û–±–æ–≤ º—è–∑–∫–æ–≤–æ –ø—ñ—Å–ª—è –∫–æ–∂–Ω–æ—ó –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –ø—ñ–¥–±–∞–¥—å–æ—Ä—é–π –∞–±–æ –ø–æ—è—Å–Ω—é–π –ø–æ–º–∏–ª–∫–∏, –∞ —â–µ ‚Äî —á–∞—Å –≤—ñ–¥ —á–∞—Å—É –¥–æ–¥–∞–≤–∞–π –≤–ª–∞—Å–Ω—ñ –¥—É–º–∫–∏ —á–∏ –º—ñ–Ω—ñ-—ñ—Å—Ç–æ—Ä—ñ—ó –∑ –∂–∏—Ç—Ç—è –≤—á–∏—Ç–µ–ª—è."
)

# --- –ë–ê–ó–û–í–Ü –ë–î –§–£–ù–ö–¶–Ü–á ---
async def get_or_create_user(pool, telegram_id, username):
    async with pool.acquire() as conn:
        user = await conn.fetchrow("SELECT * FROM users WHERE telegram_id = $1", telegram_id)
        if not user:
            await conn.execute(
                "INSERT INTO users (telegram_id, username) VALUES ($1, $2)",
                telegram_id, username
            )
            user = await conn.fetchrow("SELECT * FROM users WHERE telegram_id = $1", telegram_id)
        return user

async def get_user_level(pool, telegram_id):
    async with pool.acquire() as conn:
        row = await conn.fetchrow("SELECT level FROM users WHERE telegram_id = $1", telegram_id)
        return row["level"] if row and row["level"] else "A2"

async def update_user_level(pool, telegram_id, level):
    async with pool.acquire() as conn:
        await conn.execute(
            "UPDATE users SET level = $1, updated_at = now() WHERE telegram_id = $2",
            level, telegram_id
        )

# --- –ü–ê–ú º–Ø–¢–¨ ---
async def save_memory(pool, user_id, role, message):
    async with pool.acquire() as conn:
        await conn.execute(
            "INSERT INTO bot_memory (user_id, role, message) VALUES ($1, $2, $3)",
            user_id, role, message
        )

async def get_memory(pool, user_id, limit=15):
    async with pool.acquire() as conn:
        rows = await conn.fetch(
            "SELECT role, message FROM bot_memory WHERE user_id = $1 ORDER BY created_at DESC LIMIT $2",
            user_id, limit
        )
    return list(reversed(rows))

# --- –ü–†–û–ì–†–ï–° –¢–ê –ü–û–ú–ò–õ–ö–ò ---
async def increment_lessons_completed(pool, user_id):
    async with pool.acquire() as conn:
        await conn.execute(
            "UPDATE users SET lessons_completed = lessons_completed + 1 WHERE telegram_id = $1",
            user_id
        )

async def add_mistake(pool, user_id, mistake):
    async with pool.acquire() as conn:
        await conn.execute(
            "UPDATE users SET mistakes = COALESCE(mistakes, '') || $1 || '\n' WHERE telegram_id = $2",
            mistake, user_id
        )

async def get_progress(pool, user_id):
    async with pool.acquire() as conn:
        row = await conn.fetchrow(
            "SELECT lessons_completed FROM users WHERE telegram_id = $1", user_id
        )
        return row["lessons_completed"] if row else 0

async def get_mistakes(pool, user_id):
    async with pool.acquire() as conn:
        row = await conn.fetchrow(
            "SELECT mistakes FROM users WHERE telegram_id = $1", user_id
        )
        return row["mistakes"] if row and row["mistakes"] else "–ü–æ–º–∏–ª–æ–∫ –ø–æ–∫–∏ —â–æ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ üëè"

# --- GPT –∑ —ñ—Å—Ç–æ—Ä—ñ—î—é –¥—ñ–∞–ª–æ–≥—É ---
async def gpt_call(pool, user_id, prompt, user_level="A2"):
    memory = await get_memory(pool, user_id, limit=15)
    messages = [
        {
            "role": "system",
            "content": SYSTEM_PROMPT_UA.replace("{user_level}", user_level),
        }
    ]
    for row in memory:
        messages.append({
            "role": "user" if row["role"] == "user" else "assistant",
            "content": row["message"],
        })
    messages.append({"role": "user", "content": prompt})

    url = "https://api.openai.com/v1/chat/completions"
    headers = {
        "Authorization": f"Bearer {OPENAI_API_KEY}",
        "Content-Type": "application/json",
    }
    data = {
        "model": "gpt-3.5-turbo",
        "messages": messages,
        "max_tokens": 350,
    }
    async with httpx.AsyncClient() as client:
        resp = await client.post(url, headers=headers, json=data, timeout=30)
        answer = resp.json()["choices"][0]["message"]["content"]
    return answer

# --- HANDLERS ---
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    pool = context.application.bot_data.get("db_pool")
    await get_or_create_user(pool, update.effective_user.id, update.effective_user.username)
    await update.message.reply_text(
        "üë©‚Äçüè´ –ü—Ä–∏–≤—ñ—Ç! –Ø ‚Äì –ø–∞–Ω—ñ –°–æ—Ñ—ñ—è, —Ç–≤–æ—è —Å—É—á–∞—Å–Ω–∞ –≤–∏–∫–ª–∞–¥–∞—á–∫–∞ –∞–Ω–≥–ª—ñ–π—Å—å–∫–æ—ó. –í—Å—ñ —ñ–Ω—Å—Ç—Ä—É–∫—Ü—ñ—ó ‚Äî —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—é, –∑–∞–≤–¥–∞–Ω–Ω—è ‚Äî –∞–Ω–≥–ª—ñ–π—Å—å–∫–æ—é! "
        "–í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π /lesson –¥–ª—è –ø–æ—á–∞—Ç–∫—É —É—Ä–æ–∫—É, /level –¥–ª—è –∑–º—ñ–Ω–∏ —Ä—ñ–≤–Ω—è, /progress –¥–ª—è –ø–µ—Ä–µ–≥–ª—è–¥—É —É—Å–ø—ñ—Ö—ñ–≤, /mistakes ‚Äî –¥–ª—è —Ç–≤–æ—ó—Ö –ø–æ–º–∏–ª–æ–∫."
    )

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "/start ‚Äì –ü–æ—á–∞—Ç–∏ –∑–Ω–æ–≤—É\n"
        "/lesson ‚Äì –ü–æ—á–∞—Ç–∏ —É—Ä–æ–∫\n"
        "/level [A1|A2|B1] ‚Äì –í—Å—Ç–∞–Ω–æ–≤–∏—Ç–∏ —Ä—ñ–≤–µ–Ω—å\n"
        "/progress ‚Äì –ü—Ä–æ–≥—Ä–µ—Å\n"
        "/mistakes ‚Äì –ß–∞—Å—Ç—ñ –ø–æ–º–∏–ª–∫–∏\n"
        "–ù–∞–¥—ñ—à–ª–∏ –±—É–¥—å-—è–∫–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∞–Ω–≥–ª—ñ–π—Å—å–∫–æ—é, —â–æ–± –ø–æ–ø—Ä–∞–∫—Ç–∏–∫—É–≤–∞—Ç–∏—Å—å!"
    )

async def lesson(update: Update, context: ContextTypes.DEFAULT_TYPE):
    pool = context.application.bot_data.get("db_pool")
    telegram_id = update.effective_user.id
    level = await get_user_level(pool, telegram_id)
    prompt = "Give me a simple English lesson with questions and tasks for level " + level
    reply = await gpt_call(pool, telegram_id, prompt, user_level=level)
    await update.message.reply_text(reply)
    await save_memory(pool, telegram_id, "bot", reply)
    await increment_lessons_completed(pool, telegram_id)

async def level(update: Update, context: ContextTypes.DEFAULT_TYPE):
    pool = context.application.bot_data.get("db_pool")
    telegram_id = update.effective_user.id
    if context.args and context.args[0] in ["A1", "A2", "B1"]:
        await update_user_level(pool, telegram_id, context.args[0])
        await update.message.reply_text(f"–†—ñ–≤–µ–Ω—å –∑–º—ñ–Ω–µ–Ω–æ –Ω–∞ {context.args[0]}")
    else:
        await update.message.reply_text("–í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è: /level A1|A2|B1")

async def progress(update: Update, context: ContextTypes.DEFAULT_TYPE):
    pool = context.application.bot_data.get("db_pool")
    telegram_id = update.effective_user.id
    completed = await get_progress(pool, telegram_id)
    await update.message.reply_text(
        f"üìà –¢–≤—ñ–π –ø—Ä–æ–≥—Ä–µ—Å:\n–í–∏–∫–æ–Ω–∞–Ω–æ —É—Ä–æ–∫—ñ–≤: {completed}\n–ú–æ–ª–æ–¥–µ—Ü—å! –ü—Ä–æ–¥–æ–≤–∂—É–π —É —Ç–æ–º—É –∂ –¥—É—Å—ñ!"
    )

async def mistakes(update: Update, context: ContextTypes.DEFAULT_TYPE):
    pool = context.application.bot_data.get("db_pool")
    telegram_id = update.effective_user.id
    mistakes = await get_mistakes(pool, telegram_id)
    await update.message.reply_text(
        f"‚ùóÔ∏è –ù–∞–π—á–∞—Å—Ç—ñ—à—ñ —Ç–≤–æ—ó –ø–æ–º–∏–ª–∫–∏:\n{mistakes}"
    )

async def chat(update: Update, context: ContextTypes.DEFAULT_TYPE):
    pool = context.application.bot_data.get("db_pool")
    telegram_id = update.effective_user.id
    prompt = update.message.text
    level = await get_user_level(pool, telegram_id)

    await save_memory(pool, telegram_id, "user", prompt)  # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞

    reply = await gpt_call(pool, telegram_id, prompt, user_level=level)

    await update.message.reply_text(reply)
    await save_memory(pool, telegram_id, "bot", reply)  # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –≤—ñ–¥–ø–æ–≤—ñ–¥—å –±–æ—Ç–∞

    # –û–ø—Ü—ñ–æ–Ω–∞–ª—å–Ω–æ: —à—É–∫–∞—î–º–æ –≤ reply "Mistake: ..." —ñ –¥–æ–¥–∞—î–º–æ –≤ –ë–î
    if "mistake" in reply.lower():
        # –î–æ–¥–∞—î–º–æ –≤—Å—é –≤—ñ–¥–ø–æ–≤—ñ–¥—å —è–∫ –ø–æ–º–∏–ª–∫—É, –∞–±–æ –ø–∞—Ä—Å–∏–º–æ —è–∫ —Ç–æ–±—ñ —Ç—Ä–µ–±–∞
        await add_mistake(pool, telegram_id, reply)

# --- START APP ---
def main():
    app = Application.builder().token(BOT_TOKEN).build()

    # –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ pool –ë–î –ø—Ä–∏ —Å—Ç–∞—Ä—Ç—ñ
    async def on_startup(app):
        pool = await asyncpg.create_pool(DATABASE_URL)
        app.bot_data["db_pool"] = pool

    app.post_init = on_startup

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("help", help_command))
    app.add_handler(CommandHandler("lesson", lesson))
    app.add_handler(CommandHandler("level", level))
    app.add_handler(CommandHandler("progress", progress))
    app.add_handler(CommandHandler("mistakes", mistakes))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, chat))

    app.run_polling()

if __name__ == "__main__":
    main()
